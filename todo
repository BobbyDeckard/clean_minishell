DONE:
X.	Check semicolons, maybe as simple as defining them as the root node
=>	Subject explicitly says we do NOT need to handle semicolons.
X.	Check multiple redirs
	=> peut-être les mettre en série dans children de cmd ? vu que c'est la dernière redir qui fait foi
=>	Once again, AST supremacy had the solution ready to be implemented without having to think about it.
X.	Handle echo $$
X.	Check behaviour for echo $USER, something, wondering about that comma...
	=> Test:
	[input] > echo Hi this is $USER, nice to meet you
	[bash output] > Hi this is ivo, nice to meet you
	[hell output] > Hi this is ivo nice to meet you
X.	We should maybe not separate arguments containing env vars in order to print them right with the spaces
X.	Check exit status globally...
X.	Finish cd builtin
	=> Maybe we don't reproduce bash where it just doesn't make any sense
X.	Check behaviour for export with existing var, and for VAR= without following
	=> If var exists, nothing is done
	=> If VAR= is given as argument, the env entry will be VAR=""
	=> If every env entry is unset, export prints nothing and returns 0
X.	Check wtf_bash screenshot.......
	=> To hell we won't try and reproduce that
X.	Check exit status with builtins in pipes
X.	Check exit status with builtins allover
X.	Check comments left in exec with norminette
X.	Unset also takes multiple arguments
X.	Update the paths when export has PATH as argument


ERRORS MET AND SOLVED
X.	(cat file || cat infile) | wc -l
		dup2 error
	=> Solved by returning to overforking as done earlier in project
X.	(cat file || cat infile) > outfile
		doesn't work (bad ast)
	=> Not totally solved but bash is just too random on this syntax:
	-	< file (grep foo && grep bar) is considered a syntax error
	-	(grep foo && grep bar) < file works only with the first grep
	-	(cat file && cat file2) > outfile concatenates both files in outfile
X.	echo ":>)">file
		works, but
	(echo ":>)")>file
		doesn't
X.	export USER=IVOOO && export > outfile
	=> some builtins missed redir handling


REAL PROBLEMS:
O.	(cat file || cat infile) grep foo
		should give a syntax error
		Seems like all those errors come from a bad handling of redirs around spaces for one, but maybe also the question of the root to set to an ast where the only thing outside parens is a redir
O.	< file (grep foo && grep bar)
		strange arg handling
		+ should be a syntax error to have a redir before parentheses
O.	echo "hello'''''''''$USER"
		should print ivo, probs to do with stuff before $USER
O.	echo 'blaifhealb | > bibabou"'
		missing space after the pipe symbol in output
		check screenshot about expander
O.	export USER=IVOOO && export > outfile && < outfile grep USER
		returns a syntax error (which contains a typo.. "invlalid operator")
O.	Just typing .. as a command gives a wrong error
		redir doesn't work..?
O.	Check that calls to ft_strdup or ft_substr are protected
O.	Check that calls to free are followed by a NULL reset (maybe do a free_null() func)
O.	Maybe revamp the parsing to interpret unspecified special characters as normal characters (at least the printable ones)
O.	Check that empty arguments can't cause a segfault
	=> DON'T JUST TEST IT, SEEMS LIKE SOMETIMES WE DON'T HAVE SEGFAULT BY SHEER LUCK
O.	Run tests on Linux and especially leak tests with valgrind
O.	Check that redirs overwrite pipes
	=> They do, but maybe have a look around a bit more
O.	Should we maybe close previously opened files in following redirs ?
	=> Seems to not cause problems on the surface, but I suspect some file descriptors could be left open by the end of the execution
	(their fd would be written over by any following redir and thus never be closed)


FAKE PROBLEMS:
O.	time (sleep 2 | sleep 2)
		doesn't work but actually never worked
O.	PINAILLAGE: signals with heredoc: when C^D, the given input should be considered WITH the preceding '>' character followed by a space at the beginning of lines, + our version gives a warining nonexistent in bash
	+ when C^C, should not print ^C
